/* eslint-disable camelcase */
import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  UpdateDateColumn,
  ManyToOne,
  OneToMany,
  ManyToMany
} from "typeorm";
import IUser, { userAutoGeneratedCols, userRequiredCols } from "./IUser";
import IBusiness from "./IBusiness";
import IProject from "./IProject";
import IPreviousOutsideProject from "./IPreviousOutsideProject";
import IEducation from "./IEducation";
import IWorkExperience from "./IWorkExperience";
import IReview from "./IReview";
import isNullGenerator from "../utils/isNullGenerator";
import IApplication from "./IProjectApplication";
import IRoom from "./IRoom";
import IMessage from "./IMessage";

const isNullable = isNullGenerator(userRequiredCols, userAutoGeneratedCols);

@Entity()
export default class User implements IUser {
  @PrimaryGeneratedColumn()
  id!: number;

  @Column({ unique: true, nullable: isNullable("email") })
  email!: string;

  @Column({ nullable: isNullable("hash") })
  hash!: string;

  @Column({ nullable: isNullable("salt") })
  salt!: string;

  @Column({ nullable: isNullable("first_name") })
  first_name!: string;

  @Column({ nullable: isNullable("last_name") })
  last_name!: string;

  @Column({ nullable: isNullable("mobile_number") })
  mobile_number!: string;

  @Column({ nullable: isNullable("status") })
  status!: string;

  @Column({ nullable: isNullable("about_me") })
  about_me!: string;

  @Column({ nullable: isNullable("headline") })
  headline!: string;

  @Column({ nullable: isNullable("profile_picture_url") })
  profile_picture_url!: string;

  @Column({ nullable: isNullable("profile_video_url") })
  profile_video_url!: string;

  @Column({ nullable: isNullable("resume_url") })
  resume_url!: string;

  @Column({ nullable: isNullable("location") })
  location!: string;

  @Column({ nullable: isNullable("role") })
  role!: string;

  @Column("text", { array: false, nullable: isNullable("external_urls") })
  external_urls!: string;

  @Column("text", { default: "student", nullable: isNullable("type") })
  type!: string;

  @Column("text", { nullable: isNullable("desired_pay") })
  desired_pay!: string;

  @Column("text", { array: true, default: {} })
  skills!: string[];

  @Column("text", { array: true, default: {} })
  preferences!: string[];

  @Column("json", { default: [] })
  certifications!: string[];

  @Column("text", { array: false, nullable: isNullable("others") })
  others!: string;

  @ManyToOne("Business", "employees")
  business!: IBusiness;

  @OneToMany("Project", "student")
  projects!: IProject[];

  @OneToMany("Education", "student")
  education!: IEducation[];

  @OneToMany("WorkExperience", "student")
  work_experiences!: IWorkExperience[];

  @OneToMany("PreviousOutsideProject", "student")
  previous_outside_projects!: IPreviousOutsideProject[];

  @OneToMany("ProjectApplication", "student")
  applications!: IApplication[];

  @OneToMany("Review", "student")
  reviews!: IReview[];

  @ManyToMany("Room", "users")
  rooms!: IRoom[];

  @OneToMany("Message", "author")
  messages!: IMessage[];

  @Column({ nullable: isNullable("stripeId") })
  stripeId!: string;

  @UpdateDateColumn()
  updated!: string;
}
